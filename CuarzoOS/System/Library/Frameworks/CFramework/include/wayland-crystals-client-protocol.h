/* Generated by wayland-scanner 1.12.0 */

#ifndef CRYSTALS_CLIENT_PROTOCOL_H
#define CRYSTALS_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_crystals The crystals protocol
 * @section page_ifaces_crystals Interfaces
 * - @subpage page_iface_crystals - 
 */
struct crystals;
struct wl_surface;

/**
 * @page page_iface_crystals crystals
 * @section page_iface_crystals_api API
 * See @ref iface_crystals.
 */
/**
 * @defgroup iface_crystals The crystals interface
 */
extern const struct wl_interface crystals_interface;

/**
 * @ingroup iface_crystals
 * @struct crystals_listener
 */
struct crystals_listener {
	/**
	 */
	void (*moved)(void *data,
		      struct crystals *crystals,
		      struct wl_surface *surface,
		      int32_t x,
		      int32_t y);
	/**
	 */
	void (*resized)(void *data,
			struct crystals *crystals,
			struct wl_surface *surface,
			uint32_t w,
			uint32_t h);
};

/**
 * @ingroup crystals_iface
 */
static inline int
crystals_add_listener(struct crystals *crystals,
		      const struct crystals_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) crystals,
				     (void (**)(void)) listener, data);
}

#define CRYSTALS_REGISTER_SURFACE 0
#define CRYSTALS_ROLE 1
#define CRYSTALS_POSITION 2
#define CRYSTALS_OPACITY 3
#define CRYSTALS_MINIMIZE 4
#define CRYSTALS_MAXIMIZE 5
#define CRYSTALS_ENABLE_BLUR 6
#define CRYSTALS_REGISTER_BLUR 7
#define CRYSTALS_CONFIGURE_BLUR 8

/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_MOVED_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_RESIZED_SINCE_VERSION 1

/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_REGISTER_SURFACE_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_ROLE_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_POSITION_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_OPACITY_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_MINIMIZE_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_MAXIMIZE_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_ENABLE_BLUR_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_REGISTER_BLUR_SINCE_VERSION 1
/**
 * @ingroup iface_crystals
 */
#define CRYSTALS_CONFIGURE_BLUR_SINCE_VERSION 1

/** @ingroup iface_crystals */
static inline void
crystals_set_user_data(struct crystals *crystals, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) crystals, user_data);
}

/** @ingroup iface_crystals */
static inline void *
crystals_get_user_data(struct crystals *crystals)
{
	return wl_proxy_get_user_data((struct wl_proxy *) crystals);
}

static inline uint32_t
crystals_get_version(struct crystals *crystals)
{
	return wl_proxy_get_version((struct wl_proxy *) crystals);
}

/** @ingroup iface_crystals */
static inline void
crystals_destroy(struct crystals *crystals)
{
	wl_proxy_destroy((struct wl_proxy *) crystals);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_register_surface(struct crystals *crystals, struct wl_surface *surface)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_REGISTER_SURFACE, surface);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_role(struct crystals *crystals, struct wl_surface *surface, uint32_t role)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_ROLE, surface, role);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_position(struct crystals *crystals, struct wl_surface *surface, int32_t x, int32_t y)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_POSITION, surface, x, y);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_opacity(struct crystals *crystals, struct wl_surface *surface, uint32_t opacity)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_OPACITY, surface, opacity);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_minimize(struct crystals *crystals, struct wl_surface *surface, uint32_t minimize)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_MINIMIZE, surface, minimize);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_maximize(struct crystals *crystals, struct wl_surface *surface, uint32_t maximize, uint32_t workspace)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_MAXIMIZE, surface, maximize, workspace);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_enable_blur(struct crystals *crystals, struct wl_surface *surface, struct wl_surface *blur_surface, uint32_t enabled)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_ENABLE_BLUR, surface, blur_surface, enabled);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_register_blur(struct crystals *crystals, struct wl_surface *surface, struct wl_surface *blur_surface)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_REGISTER_BLUR, surface, blur_surface);
}

/**
 * @ingroup iface_crystals
 */
static inline void
crystals_configure_blur(struct crystals *crystals, struct wl_surface *surface, struct wl_surface *blur_surface, uint32_t tint, int32_t x, int32_t y, uint32_t w, uint32_t h)
{
	wl_proxy_marshal((struct wl_proxy *) crystals,
			 CRYSTALS_CONFIGURE_BLUR, surface, blur_surface, tint, x, y, w, h);
}

#ifdef  __cplusplus
}
#endif

#endif
